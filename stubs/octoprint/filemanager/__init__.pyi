from .analysis import AnalysisQueue as AnalysisQueue, QueueEntry as QueueEntry
from .destinations import FileDestinations as FileDestinations
from .storage import LocalFileStorage as LocalFileStorage
from .util import AbstractFileWrapper as AbstractFileWrapper, DiskFileWrapper as DiskFileWrapper, StreamWrapper as StreamWrapper
from _typeshed import Incomplete
from octoprint.events import Events as Events, eventManager as eventManager
from octoprint.util import yaml as yaml
from typing import NamedTuple

class ContentTypeMapping(NamedTuple):
    extensions: Incomplete
    content_type: Incomplete

class ContentTypeDetector(NamedTuple):
    extensions: Incomplete
    detector: Incomplete

extensions: Incomplete

def full_extension_tree(): ...
def get_extensions(type, subtree: Incomplete | None = None): ...
def get_all_extensions(subtree: Incomplete | None = None): ...
def get_path_for_extension(extension, subtree: Incomplete | None = None): ...
def get_content_type_mapping_for_extension(extension, subtree: Incomplete | None = None): ...
def valid_extension(extension, type: Incomplete | None = None, tree: Incomplete | None = None): ...
def valid_file_type(filename, type: Incomplete | None = None, tree: Incomplete | None = None): ...
def get_file_type(filename): ...
def get_mime_type(filename): ...

class NoSuchStorage(Exception): ...

class FileManager:
    def __init__(self, analysis_queue, slicing_manager, printer_profile_manager, initial_storage_managers: Incomplete | None = None) -> None: ...
    def initialize(self, process_backlog: bool = False) -> None: ...
    def process_backlog(self) -> None: ...
    def reload_plugins(self) -> None: ...
    def register_slicingprogress_callback(self, callback) -> None: ...
    def unregister_slicingprogress_callback(self, callback) -> None: ...
    def add_storage(self, storage_type, storage_manager) -> None: ...
    def remove_storage(self, type) -> None: ...
    @property
    def registered_storages(self): ...
    @property
    def slicing_enabled(self): ...
    @property
    def registered_slicers(self): ...
    @property
    def default_slicer(self): ...
    def analyse(self, destination, path, printer_profile_id: Incomplete | None = None): ...
    def slice(self, slicer_name, source_location, source_path, dest_location, dest_path, position: Incomplete | None = None, profile: Incomplete | None = None, printer_profile_id: Incomplete | None = None, overrides: Incomplete | None = None, display: Incomplete | None = None, callback: Incomplete | None = None, callback_args: Incomplete | None = None) -> None: ...
    def on_slicing_progress(self, slicer, source_location, source_path, dest_location, dest_path, _progress: Incomplete | None = None) -> None: ...
    def get_busy_files(self): ...
    def file_in_path(self, destination, path, file): ...
    def file_exists(self, destination, path): ...
    def folder_exists(self, destination, path): ...
    def list_files(self, locations: Incomplete | None = None, path: Incomplete | None = None, filter: Incomplete | None = None, recursive: Incomplete | None = None, level: int = 0, force_refresh: bool = False): ...
    def add_file(self, location, path, file_object, links: Incomplete | None = None, allow_overwrite: bool = False, printer_profile: Incomplete | None = None, analysis: Incomplete | None = None, display: Incomplete | None = None, user: Incomplete | None = None): ...
    def remove_file(self, location, path) -> None: ...
    def copy_file(self, location, source, destination) -> None: ...
    def move_file(self, location, source, destination) -> None: ...
    def add_folder(self, location, path, ignore_existing: bool = True, display: Incomplete | None = None, user: Incomplete | None = None): ...
    def remove_folder(self, location, path, recursive: bool = True) -> None: ...
    def copy_folder(self, location, source, destination) -> None: ...
    def move_folder(self, location, source, destination) -> None: ...
    def get_size(self, location, path): ...
    def get_lastmodified(self, location: str, path: str) -> int: ...
    def has_analysis(self, location, path): ...
    def get_metadata(self, location, path): ...
    def add_link(self, location, path, rel, data) -> None: ...
    def remove_link(self, location, path, rel, data) -> None: ...
    def log_print(self, location, path, timestamp, print_time, success, printer_profile) -> None: ...
    def save_recovery_data(self, location, path, pos) -> None: ...
    def delete_recovery_data(self) -> None: ...
    def get_recovery_data(self): ...
    def get_additional_metadata(self, location, path, key) -> None: ...
    def set_additional_metadata(self, location, path, key, data, overwrite: bool = False, merge: bool = False) -> None: ...
    def remove_additional_metadata(self, location, path, key) -> None: ...
    def path_on_disk(self, location, path): ...
    def canonicalize(self, location, path): ...
    def sanitize(self, location, path): ...
    def sanitize_name(self, location, name): ...
    def sanitize_path(self, location, path): ...
    def split_path(self, location, path): ...
    def join_path(self, location, *path): ...
    def path_in_storage(self, location, path): ...
    def last_modified(self, location, path: Incomplete | None = None, recursive: bool = False): ...

from _typeshed import Incomplete
from octoprint.util import sv as sv, time_this as time_this, to_unicode as to_unicode
from octoprint.util.version import get_python_version_string as get_python_version_string, is_python_compatible as is_python_compatible
from typing import NamedTuple

SUFFIXES: Incomplete

def parse_plugin_metadata(path): ...

class ControlProperties:
    attr_name: str
    attr_description: str
    attr_disabling_DISCOURAGED: str
    attr_version: str
    attr_author: str
    attr_url: str
    attr_license: str
    attr_privacypolicy: str
    attr_pythoncompat: str
    attr_hidden: str
    attr_hooks: str
    attr_implementation: str
    attr_helpers: str
    attr_check: str
    attr_load: str
    attr_unload: str
    attr_enable: str
    attr_disable: str
    default_pythoncompat: str
    @classmethod
    def all(cls): ...

class _EntryPointOrigin(NamedTuple):
    type: Incomplete
    entry_point: Incomplete
    module_name: Incomplete
    package_name: Incomplete
    package_version: Incomplete

class EntryPointOrigin(_EntryPointOrigin): ...

class _FolderOrigin(NamedTuple):
    type: Incomplete
    folder: Incomplete

class FolderOrigin(_FolderOrigin): ...

class _ModuleOrigin(NamedTuple):
    type: Incomplete
    module_name: Incomplete
    folder: Incomplete

class ModuleOrigin(_ModuleOrigin): ...

class PluginInfo:
    key: Incomplete
    location: Incomplete
    instance: Incomplete
    origin: Incomplete
    enabled: bool
    blacklisted: bool
    forced_disabled: bool
    incompatible: bool
    bundled: bool
    loaded: bool
    managable: bool
    needs_restart: bool
    invalid_syntax: bool
    flags: Incomplete
    def __init__(self, key, location, instance, name: Incomplete | None = None, version: Incomplete | None = None, description: Incomplete | None = None, author: Incomplete | None = None, url: Incomplete | None = None, license: Incomplete | None = None, parsed_metadata: Incomplete | None = None) -> None: ...
    def validate(self, phase, additional_validators: Incomplete | None = None): ...
    def long_str(self, show_bundled: bool = False, bundled_strs=(' [B]', ''), show_location: bool = False, location_str: str = ' - {location}', show_enabled: bool = False, enabled_strs=('* ', '  ', 'X ', 'C ')): ...
    def get_hook(self, hook): ...
    def get_implementation(self, *types): ...
    @property
    def name(self): ...
    @property
    def description(self): ...
    @property
    def disabling_discouraged(self): ...
    @property
    def version(self): ...
    @property
    def author(self): ...
    @property
    def url(self): ...
    @property
    def license(self): ...
    @property
    def privacypolicy(self): ...
    @property
    def pythoncompat(self): ...
    @property
    def hidden(self): ...
    @property
    def hooks(self): ...
    @property
    def implementation(self): ...
    @property
    def helpers(self): ...
    @property
    def check(self): ...
    @property
    def load(self): ...
    @property
    def unload(self): ...
    @property
    def enable(self): ...
    @property
    def disable(self): ...
    @property
    def parsed_metadata(self): ...
    @property
    def control_properties(self): ...
    @property
    def looks_like_plugin(self): ...

class PluginManager:
    plugin_timings_logtarget: str
    plugin_timings_message: str
    default_order: int
    logger: Incomplete
    plugin_folders: Incomplete
    plugin_bases: Incomplete
    plugin_entry_points: Incomplete
    plugin_disabled_list: Incomplete
    plugin_sorting_order: Incomplete
    plugin_blacklist: Incomplete
    plugin_restart_needing_hooks: Incomplete
    plugin_obsolete_hooks: Incomplete
    plugin_validators: Incomplete
    logging_prefix: Incomplete
    compatibility_ignored_list: Incomplete
    plugin_considered_bundled: Incomplete
    plugin_flags: Incomplete
    enabled_plugins: Incomplete
    disabled_plugins: Incomplete
    plugin_implementations: Incomplete
    plugin_implementations_by_type: Incomplete
    implementation_injects: Incomplete
    implementation_inject_factories: Incomplete
    implementation_pre_inits: Incomplete
    implementation_post_inits: Incomplete
    on_plugin_loaded: Incomplete
    on_plugin_unloaded: Incomplete
    on_plugin_enabled: Incomplete
    on_plugin_disabled: Incomplete
    on_plugin_implementations_initialized: Incomplete
    on_plugins_loaded: Incomplete
    on_plugins_enabled: Incomplete
    registered_clients: Incomplete
    marked_plugins: Incomplete
    def __init__(self, plugin_folders, plugin_bases, plugin_entry_points, logging_prefix: Incomplete | None = None, plugin_disabled_list: Incomplete | None = None, plugin_sorting_order: Incomplete | None = None, plugin_blacklist: Incomplete | None = None, plugin_restart_needing_hooks: Incomplete | None = None, plugin_obsolete_hooks: Incomplete | None = None, plugin_considered_bundled: Incomplete | None = None, plugin_flags: Incomplete | None = None, plugin_validators: Incomplete | None = None, compatibility_ignored_list: Incomplete | None = None) -> None: ...
    @property
    def plugins(self): ...
    @property
    def plugin_hooks(self): ...
    def find_plugins(self, existing: Incomplete | None = None, ignore_uninstalled: bool = True, incl_all_found: bool = False): ...
    def reload_plugins(self, startup: bool = False, initialize_implementations: bool = True, force_reload: Incomplete | None = None) -> None: ...
    def mark_plugin(self, name, **flags) -> None: ...
    def is_plugin_marked(self, name, flag): ...
    def load_plugin(self, name, plugin: Incomplete | None = None, startup: bool = False, initialize_implementation: bool = True) -> None: ...
    def unload_plugin(self, name) -> None: ...
    def enable_plugin(self, name, plugin: Incomplete | None = None, initialize_implementation: bool = True, startup: bool = False): ...
    def disable_plugin(self, name, plugin: Incomplete | None = None): ...
    def is_restart_needing_plugin(self, plugin): ...
    def has_restart_needing_implementation(self, plugin): ...
    def has_restart_needing_hooks(self, plugin): ...
    def has_obsolete_hooks(self, plugin): ...
    def is_restart_needing_hook(self, hook): ...
    def is_obsolete_hook(self, hook): ...
    @staticmethod
    def has_any_of_hooks(plugin, *hooks): ...
    @staticmethod
    def hook_matches_hooks(hook, *hooks): ...
    @staticmethod
    def mixins_matching_bases(klass, *bases): ...
    @staticmethod
    def has_any_of_mixins(plugin, *mixins): ...
    def initialize_implementations(self, additional_injects: Incomplete | None = None, additional_inject_factories: Incomplete | None = None, additional_pre_inits: Incomplete | None = None, additional_post_inits: Incomplete | None = None) -> None: ...
    def initialize_implementation_of_plugin(self, name, plugin, additional_injects: Incomplete | None = None, additional_inject_factories: Incomplete | None = None, additional_pre_inits: Incomplete | None = None, additional_post_inits: Incomplete | None = None): ...
    def initialize_implementation(self, name, plugin, implementation, additional_injects: Incomplete | None = None, additional_inject_factories: Incomplete | None = None, additional_pre_inits: Incomplete | None = None, additional_post_inits: Incomplete | None = None): ...
    def log_all_plugins(self, show_bundled: bool = True, bundled_str=(' (bundled)', ''), show_location: bool = True, location_str: str = ' = {location}', show_enabled: bool = True, enabled_str=(' ', '!', '#', '*'), only_to_handler: Incomplete | None = None): ...
    def get_plugin(self, identifier, require_enabled: bool = True): ...
    def get_plugin_info(self, identifier, require_enabled: bool = True): ...
    def get_hooks(self, hook): ...
    def get_implementations(self, *types, **kwargs): ...
    def get_filtered_implementations(self, f, *types, **kwargs): ...
    def get_helpers(self, name, *helpers): ...
    def register_message_receiver(self, client) -> None: ...
    def unregister_message_receiver(self, client) -> None: ...
    def send_plugin_message(self, plugin, data, permissions: Incomplete | None = None) -> None: ...

def is_sub_path_of(path, parent): ...
def is_editable_install(install_dir, package, module, location): ...
def normalize_project_url_label(label: str) -> str: ...

class Plugin:
    def __init__(self) -> None: ...
    def initialize(self) -> None: ...
    def on_plugin_enabled(self) -> None: ...
    def on_plugin_disabled(self) -> None: ...

class RestartNeedingPlugin(Plugin): ...

class SortablePlugin(Plugin):
    def get_sorting_key(self, context: Incomplete | None = None) -> None: ...

class PluginNeedsRestart(Exception):
    name: Incomplete
    message: Incomplete
    def __init__(self, name) -> None: ...

class PluginLifecycleException(Exception):
    name: Incomplete
    reason: Incomplete
    message: Incomplete
    def __init__(self, name, reason, message) -> None: ...

class PluginCantInitialize(PluginLifecycleException):
    def __init__(self, name, reason) -> None: ...

class PluginCantEnable(PluginLifecycleException):
    def __init__(self, name, reason) -> None: ...

class PluginCantDisable(PluginLifecycleException):
    def __init__(self, name, reason) -> None: ...
